#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np
from enum import Enum
from std_msgs.msg import UInt8
## from turtlebot3_msgs.msg import movingParam

class CoreModeDecider():
    def __init__(self):
        # subscribes : invoking object detected
        self.sub_traffic_sign = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)
        self.sub_traffic_line = rospy.Subscriber('/detect/traffic_line', UInt8, self.cbInvokedByTrafficLine, queue_size=1)
        self.sub_returned_mode = rospy.Subscriber('/core/returned_mode', UInt8, self.cbReturnedMode, queue_size=1)

        self.pub_debug = rospy.Publisher('/core/debug', UInt8, queue_size = 1)
        # self.pub_moving = rospy.Publisher('/control/moving/state', movingParam, queue_size= 1)
        # publishes : decided mode
        self.pub_decided_mode = rospy.Publisher('/core/decided_mode', UInt8, queue_size=1)

        self.InvokedObject = Enum('InvokedObject', 'traffic_sign traffic_light traffic_line')
        self.TrafficSign = Enum('TrafficSign', 'divide stop parking tunnel left right no_entry construction')
        self.CurrentMode = Enum('CurrentMode', 'idle lane_following traffic_light parking_lot level_crossing tunnel construction')

        self.fnInitMode()
        self.fnInitSelf()


    # Invoke if traffic sign is detected
    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):
        rospy.loginfo("invoke sign")
        self.fnDecideMode(self.InvokedObject.traffic_sign.value, traffic_sign_type_msg)
        rospy.loginfo("Traffic sign detected")

    def cbInvokedByTrafficLine(self, traffic_line_type_msg):
        rospy.loginfo("invoke line")
        self.fnDecideMode(self.InvokedObject.traffic_line.value, traffic_line_type_msg)
        rospy.loginfo("Traffic line detected")

    def cbReturnedMode(self, mode):
        rospy.loginfo("Init Mode")
        self.fnInitMode()

    def fnInitMode(self):                                                   # starts only when the program is started initially or any mission is completed
        self.current_mode = self.CurrentMode.lane_following.value
        self.fnPublishMode()

    def fnInitSelf(self):
        rospy.loginfo("Init")
        self.current_mode = self.CurrentMode.lane_following.value
        rospy.loginfo("Current Mode : lane_following")

    def fnDecideMode(self, invoked_object, msg_data):                       # starts only when the traffic sign / traffic light is detected & current_mode is lane_following
        rospy.loginfo("lane_following")
        if self.current_mode == self.CurrentMode.lane_following.value:      
            if invoked_object == self.InvokedObject.traffic_sign.value:   # Any Sign detected
                rospy.loginfo("traffic sign")
                if msg_data.data == self.TrafficSign.stop.value:            # Stop Sign detected
                    rospy.loginfo("level crossing")
                    self.current_mode = self.CurrentMode.level_crossing.value
                
            else:
                pass

            self.fnPublishMode()
        else:
            pass

    def fnPublishMode(self):
        decided_mode = UInt8()
        decided_mode.data = self.current_mode
        self.pub_decided_mode.publish(decided_mode)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    node = CoreModeDecider()
    node.main()
